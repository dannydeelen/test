//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMyService")]
    public interface IMyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Login", ReplyAction="http://tempuri.org/IMyService/LoginResponse")]
        bool Login(string u, string p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Login", ReplyAction="http://tempuri.org/IMyService/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string u, string p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Register", ReplyAction="http://tempuri.org/IMyService/RegisterResponse")]
        string Register(string u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Register", ReplyAction="http://tempuri.org/IMyService/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(string u);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Insert", ReplyAction="http://tempuri.org/IMyService/InsertResponse")]
        void Insert(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/Insert", ReplyAction="http://tempuri.org/IMyService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(string s);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceChannel : WpfApplication1.ServiceReference1.IMyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.ClientBase<WpfApplication1.ServiceReference1.IMyService>, WpfApplication1.ServiceReference1.IMyService {
        
        public MyServiceClient() {
        }
        
        public MyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Login(string u, string p) {
            return base.Channel.Login(u, p);
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string u, string p) {
            return base.Channel.LoginAsync(u, p);
        }
        
        public string Register(string u) {
            return base.Channel.Register(u);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string u) {
            return base.Channel.RegisterAsync(u);
        }
        
        public void Insert(string s) {
            base.Channel.Insert(s);
        }
        
        public System.Threading.Tasks.Task InsertAsync(string s) {
            return base.Channel.InsertAsync(s);
        }
    }
}
